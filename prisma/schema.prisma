generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ConnectInstallation {
  id                         BigInt                       @id @default(autoincrement())
  key                        String
  clientKey                  String                       @unique @map("client_key")
  sharedSecret               String                       @map("shared_secret")
  baseUrl                    String                       @map("base_url")
  displayUrl                 String                       @map("display_url")
  FigmaOAuth2UserCredentials FigmaOAuth2UserCredentials[]
  FigmaTeam                  FigmaTeam[]
  AssociatedFigmaDesign      AssociatedFigmaDesign[]

  @@map("jira_connect_installation")
}

model AssociatedFigmaDesign {
  id                BigInt  @id @default(autoincrement())
  fileKey           String  @map("file_key")
  nodeId            String  @map("node_id") // Prisma does not support nullable columns with the composite indexes: https://github.com/prisma/prisma/issues/3197
  associatedWithAri String  @map("associated-with-ari")
  inputUrl          String? @map("input_url")
  devStatus         String  @default("UNKNOWN") @map("dev_status")
  lastUpdated       String  @default("1970-01-01T00:00:00.000Z") @map("last_updated")

  connectInstallation   ConnectInstallation @relation(fields: [connectInstallationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  connectInstallationId BigInt              @map("connect_installation_id")

  @@unique([fileKey, nodeId, associatedWithAri, connectInstallationId])
  @@map("jira_associated_figma_design")
}

model FigmaOAuth2UserCredentials {
  id              BigInt   @id @default(autoincrement())
  atlassianUserId String   @map("atlassian_user_id")
  accessToken     String   @map("access_token")
  refreshToken    String   @map("refresh_token")
  expiresAt       DateTime @map("expires_at") @db.Timestamptz

  connectInstallation   ConnectInstallation @relation(fields: [connectInstallationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  connectInstallationId BigInt              @map("connect_installation_id")

  @@unique([atlassianUserId, connectInstallationId])
  @@map("jira_figma_oauth2_user_credentials")
}

enum FigmaTeamAuthStatus {
  OK
  ERROR

  @@map("jira_figma_team_auth_status")
}

model FigmaTeam {
  id                        BigInt              @id @default(autoincrement())
  webhookId                 String              @unique @map("webhook_id")
  webhookPasscode           String              @map("webhook_passcode")
  teamId                    String              @map("team_id")
  teamName                  String              @map("team_name")
  figmaAdminAtlassianUserId String              @map("figma_admin_atlassian_user_id") // Atlassian user ID of the Figma team admin that configured the webhook
  authStatus                FigmaTeamAuthStatus

  connectInstallation   ConnectInstallation @relation(fields: [connectInstallationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  connectInstallationId BigInt              @map("connect_installation_id")

  @@unique([teamId, connectInstallationId])
  @@map("jira_figma_team")
}
